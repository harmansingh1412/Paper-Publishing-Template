turtle_forward(s)
angle1 <- runif(1, 10, 60)
turtle_left(angle1)
fractal_tree(s * runif(1, 0.25, 1), depth - 1, maxLength)
turtle_right(angle1)
angle2 <- runif(1, 10, 60)
turtle_right(angle2)
fractal_tree(s * runif(1, 0.25, 1), depth - 1, maxLength)
turtle_left(angle2)
turtle_backward(s)
}
}
set.seed(123)
turtle_init(500, 600, "clip")
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 800, height = 800)
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
fractal_tree(s = runif(1, 50, maxLength), n = round(runif(1, 1, maxDepth)))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 200)
fractal_tree <- function(s, depth, length) {
if(depth <= 0) {
turtle_forward(s)
turtle_backward(s)
} else {
turtle_forward(s)
angle1 <- runif(1, 10, 60)
turtle_left(angle1)
fractal_tree(s * runif(1, 0.25, 1), depth - 1, length)
turtle_right(angle1)
angle2 <- runif(1, 10, 60)
turtle_right(angle2)
fractal_tree(s * runif(1, 0.25, 1), depth - 1, length)
turtle_left(angle2)
turtle_backward(s)
}
}
set.seed(123)
turtle_init(500, 600, "clip")
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 800, height = 800)
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
fractal_tree(s = runif(1, 50, maxLength), n = round(runif(1, 1, maxDepth)))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 200)
drawTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawTree(depth - 1, length / 2)
turtle_left(60)
drawTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# set.seed(123)
# turtle_init(500, 600, "clip")
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 800, height = 800)
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 200)
drawTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawTree(depth - 1, length / 2)
turtle_left(60)
drawTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# set.seed(123)
# turtle_init(500, 600, "clip")
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 800, height = 800)
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 50)
drawTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawTree(depth - 1, length / 2)
turtle_left(60)
drawTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# set.seed(123)
# turtle_init(500, 600, "clip")
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200)
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
drawTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawTree(depth - 1, length / 2)
turtle_left(60)
drawTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
set.seed(123)
turtle_init(500,600,"clip")
turtle_do({ turtle_up()
turtle_backward(250)
turtle_down()
turtle_col("darkgreen")
fractal_tree(100,12)
})
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200,mode="cycle")
#
# # Set the turtle graphics speed and pen color
# turtle_speed(speed = "fastest")
# turtle_pen(pencolor = "darkgreen")
# Loop through each tree
for (i in 1:numTrees) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
View(drawForest)
knitr::opts_chunk$set(echo = TRUE)
# install package
#install.packages("TurtleGraphics")
# load library
library(TurtleGraphics)
library(foreach)
library(doParallel)
library(doParallel)
# Define a function to draw a single tree
drawSingleTree <- function(maxDepth, maxLength) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200,mode="cycle")
# Set up parallel processing
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTree(maxDepth, maxLength)
}
# Clean up parallel processing
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
# Define a function to draw a single tree
drawSingleTree <- function(maxDepth, maxLength) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200,mode="cycle")
# Set up parallel processing
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTree(maxDepth, maxLength)
}
# Clean up parallel processing
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
View(drawSingleTree)
drawSingleTree <- function(length) {
turtle_down()
turtle_col("darkgreen")
fractal_tree(100, length)
}
set.seed(123)
turtle_init(500,600,"clip")
turtle_do({
turtle_up()
turtle_backward(250)
drawSingleTree(12)
})
# Define a function to draw a single tree
drawSingleTree <- function(maxDepth, maxLength) {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200,mode="cycle")
# Set up parallel processing
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTree(maxDepth, maxLength)
}
# Clean up parallel processing
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
# Define a function to draw a single fractal tree
drawSingleTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawSingleTree(depth - 1, length / 2)
turtle_left(60)
drawSingleTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200, mode = "cycle")
# Create a parallel cluster
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# Define a function to draw a single tree in parallel
drawSingleTreeParallel <- function() {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawSingleTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTreeParallel()
}
# Stop the parallel cluster
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
knitr::opts_chunk$set(echo = TRUE)
# install package
#install.packages("TurtleGraphics")
# load library
library(TurtleGraphics)
library(foreach)
library(doParallel)
# Define a function to draw a single fractal tree
drawSingleTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawSingleTree(depth - 1, length / 2)
turtle_left(60)
drawSingleTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200, mode = "cycle")
# Create a parallel cluster
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# Define a function to draw a single tree in parallel
drawSingleTreeParallel <- function() {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawSingleTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTreeParallel()
}
# Stop the parallel cluster
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
knitr::opts_chunk$set(echo = TRUE)
# install package
install.packages("TurtleGraphics")
# load library
library(TurtleGraphics)
library(foreach)
library(doParallel)
install.packages("TurtleGraphics")
knitr::opts_chunk$set(echo = TRUE)
# install package
#install.packages("TurtleGraphics")
# load library
library(TurtleGraphics)
library(foreach)
library(doParallel)
install.packages("TurtleGraphics")
knitr::opts_chunk$set(echo = TRUE)
# install package
#install.packages("TurtleGraphics")
# load library
library(TurtleGraphics)
library(foreach)
library(doParallel)
# Define a function to draw a single fractal tree
drawSingleTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawSingleTree(depth - 1, length / 2)
turtle_left(60)
drawSingleTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200, mode = "cycle")
# Create a parallel cluster
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# Define a function to draw a single tree in parallel
drawSingleTreeParallel <- function() {
# Set the turtle graphics position and angle
turtle_up()
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawSingleTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTreeParallel()
}
# Stop the parallel cluster
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
# Define a function to draw a single fractal tree
drawSingleTree <- function(depth, length) {
if (depth == 0) {
turtle_forward(length)
turtle_backward(length)
} else {
turtle_forward(length)
turtle_right(30)
drawSingleTree(depth - 1, length / 2)
turtle_left(60)
drawSingleTree(depth - 1, length / 2)
turtle_right(30)
turtle_backward(length)
}
}
# Define a function to draw a forest of fractal trees
drawForest <- function(numTrees, maxDepth, maxLength) {
# Set the turtle graphics window size
turtle_init(width = 1200, height = 1200, mode = "cycle")
# Create a parallel cluster
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# Define a function to draw a single tree in parallel
drawSingleTreeParallel <- function() {
# Set the turtle graphics position and angle
turtle_forward(runif(1, -300, 300))
turtle_right(runif(1, 0, 360))
# Draw the tree
drawSingleTree(depth = round(runif(1, 1, maxDepth)), length = runif(1, 50, maxLength))
}
# Loop through each tree in parallel
foreach(i = 1:numTrees, .combine = 'c') %dopar% {
drawSingleTreeParallel()
}
# Stop the parallel cluster
stopCluster(cl)
}
# Draw a forest of fractal trees with 10 trees, maximum depth of 6, and maximum length of 200
drawForest(numTrees = 10, maxDepth = 6, maxLength = 100)
